-- BP 7.1.6 content: ModelClass syschar: 3 persistence-version: 7.1.6

INSERT INTO O_OBJ
	VALUES ("324b9649-c373-4ba1-814c-460202283e85",
	'Stay',
	5,
	'Stay',
	'Tracks a single stay of a single vehicle in a given carpark.
Created when a ticket is collected from an entry stand.
',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_TFR
	VALUES ("751b003c-8805-4812-ad25-1c5be4949853",
	"324b9649-c373-4ba1-814c-460202283e85",
	'ProcessExit',
	'',
	"80478fa4-2779-4e87-a200-6cc9a502e760",
	1,
	'// Returns the disposition of this stay.
// Creates a charge or an additional charge if necessary.
disposition = StayDisposition::Unpaid;
CurrentTime = TimeUtil::CurrentTime();

// If there is an instance of charge, determine whether
// the exit deadline was met.
select any charge related by self->
  ChargeSegment[R15]->
  Charge[R23.''addend of''];
if ( not empty charge )
  exit_deadline = 0;  // force integer
  exit_deadline = charge.ExitDeadline;
  if ( CurrentTime <= exit_deadline ) 
    disposition = StayDisposition::PunctualExit;
  else
    // Create additional charge for tardy exit
    self.CalculateAdditionalCharge();
    disposition = StayDisposition::TardyExit;
  end if;
else
  // Create payment and charge for unpaid stay.
  create object instance payment of Payment;
  payment.ExitTime = CurrentTime;
  payment.Amount = 0;
  relate payment to self across R16.''retires debt for'';
  self.CalculateCharge();
  disposition = StayDisposition::Unpaid;
end if;

return disposition;',
	1,
	'',
	"00000000-0000-0000-0000-000000000000",
	0);
INSERT INTO S_DT_PROXY
	VALUES ("80478fa4-2779-4e87-a200-6cc9a502e760",
	"00000000-0000-0000-0000-000000000000",
	'StayDisposition',
	'Indicates the status of a stay when an exit for that stay is processed.',
	'',
	'../../Types/Types.xtuml');
INSERT INTO O_TFR
	VALUES ("5ec3c370-e4d4-48c1-9495-dc0a5f6e4177",
	"324b9649-c373-4ba1-814c-460202283e85",
	'CalculateCharge',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'// Use the exit time from the associated payment to 
// create charge segments for this stay.
select one payment related by self->Payment[R16.''solicits''];
self.CreateChargeSegments( ExitTime:payment.ExitTime );

// Sum all charge segments and store the result in a charge
// and relate the segments to the charge.
create object instance Charge of Charge;
Charge.Amount = 0;
Charge.WaiverGranted = false;
select many ChgSegs related by self->ChargeSegment[R15];
for each ChgSeg in ChgSegs
  Charge.Amount = Charge.Amount + ChgSeg.Amount;
  relate Charge to ChgSeg across R23.''sum of'';
end for;',
	1,
	'',
	"751b003c-8805-4812-ad25-1c5be4949853",
	0);
INSERT INTO O_TFR
	VALUES ("bc8cfa9a-3b0c-457e-840d-222ea12cb4ca",
	"324b9649-c373-4ba1-814c-460202283e85",
	'CreateChargeSegments',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'// Find all relevant instances of fee schedule for this stay
// and relate each one to this stay using one charge segment.

// First, find the fee schedule covering the end of the stay 
// by finding the earliest end time that is later than the 
// exit time for this stay.
cursor = 0;
EndPosition = 0;
select any FeeSched from instances of FeeSchedule where false;  // Decl
while ( true )
  select any FeeSched related by self->
    Carpark[R7.''generates revenue for'']->
    FeeSchedule[R14.''applies'']
    where ( selected.Position == cursor );
  if ( FeeSched.End >= param.ExitTime )
    EndPosition = cursor;
    break;
  else
    cursor = cursor + 1;
  end if;
end while;

// Next, find the fee schedule instance covering the entry
// time for this stay by walking backwards through the 
// sequence to find the latest start time that is earlier 
// than the entry time for this stay.
StartPosition = EndPosition;
while ( cursor >= 0 )
  select any FeeSched related by self->
    Carpark[R7.''generates revenue for'']->
    FeeSchedule[R14.''applies'']
    where ( selected.Position == cursor );
  if ( FeeSched.Start <= self.EntryTime )
    StartPosition = cursor;
    break;
  else
    cursor = cursor - 1;
  end if;
end while;

// Link all relevant fee schedules to this stay using a charge
// segment for each link, and prod each charge segment to 
// calculate and store the amount.
cursor = StartPosition;
while ( cursor <= EndPosition )
  create object instance ChgSeg of ChargeSegment;
  select any FeeSched related by self->
    Carpark[R7.''generates revenue for'']->
    FeeSchedule[R14.''applies'']
    where ( selected.Position == cursor );
  relate FeeSched to self across R15.''applies to'' using ChgSeg;
  ChgSeg.CalculateCharge();
  cursor = cursor + 1;
end while;',
	1,
	'',
	"06197662-c0f1-4004-b298-a27ee1441249",
	0);
INSERT INTO O_TPARM
	VALUES ("ce68b82c-fe30-454f-834f-1d751f2c1ec2",
	"bc8cfa9a-3b0c-457e-840d-222ea12cb4ca",
	'ExitTime',
	"d3fcb8ce-ecb8-4cf7-b70d-7ae617f25ee4",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'Exit time for the set of charge segments to be created which
could be for either a base charge or an additional charge.');
INSERT INTO S_DT_PROXY
	VALUES ("d3fcb8ce-ecb8-4cf7-b70d-7ae617f25ee4",
	"00000000-0000-0000-0000-000000000000",
	'Time',
	'A specific point in time represented as a number of seconds
past the beginning of a defined epic.

Units: seconds.',
	'',
	'../../DateTime/DateTime.xtuml');
INSERT INTO O_TFR
	VALUES ("06197662-c0f1-4004-b298-a27ee1441249",
	"324b9649-c373-4ba1-814c-460202283e85",
	'CalculateAdditionalCharge',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'// Use the current time as the exit time to create charge
// segments for the overstay period.
ExitTime = TimeUtil::CurrentTime();
self.CreateChargeSegments( ExitTime:ExitTime );

// Sum all charge segments and store the result in an 
// additional charge and relate the segments to the
// additional charge.
create object instance AdditionalCharge of AdditionalCharge;
AdditionalCharge.Amount = 0;
AdditionalCharge.WaiverGranted = false;
select many ChgSegs related by self->ChargeSegment[R15];
for each ChgSeg in ChgSegs
  AdditionalCharge.Amount = AdditionalCharge.Amount + ChgSeg.Amount;
  relate AdditionalCharge to ChgSeg across R24.''sum of'';
end for;',
	1,
	'',
	"5ec3c370-e4d4-48c1-9495-dc0a5f6e4177",
	0);
INSERT INTO O_TFR
	VALUES ("4688c039-b4ac-457d-b154-20d5a88099f6",
	"324b9649-c373-4ba1-814c-460202283e85",
	'RemoveCharge',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'// Unrelate and remove everything associated with the charge for this stay.
select any charge related by self->ChargeSegment[R15]->
  Charge[R23.''addend of''];
select many ChgSegs related by charge->ChargeSegment[R23.''sum of''];
for each ChgSeg in ChgSegs
  unrelate ChgSeg from charge across R23.''addend of'';
  select one FeeSched related by ChgSeg->FeeSchedule[R15.''spans''];
  unrelate FeeSched from self across R15.''applies to'' using ChgSeg;
  delete object instance ChgSeg;
end for;
delete object instance charge;',
	1,
	'',
	"bc8cfa9a-3b0c-457e-840d-222ea12cb4ca",
	0);
INSERT INTO O_TFR
	VALUES ("3a4f8fd6-8175-4df5-9ac0-a7a009e75234",
	"324b9649-c373-4ba1-814c-460202283e85",
	'WaiverGranted',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'// If an additional charge exists, it has been waived, otherwise
// it is the (base) charge that has just been waived.
select any AddChg related by self->ChargeSegment[R15]->
  AdditionalCharge[R24.''addend of''];
if ( not empty AddChg )
  AddChg.WaiverGranted = true;
else
  select any charge related by self->ChargeSegment[R15]->
    Charge[R23.''addend of''];
  charge.WaiverGranted = true;
end if;',
	1,
	'',
	"4688c039-b4ac-457d-b154-20d5a88099f6",
	0);
INSERT INTO O_NBATTR
	VALUES ("48ad1eab-ce0d-4eeb-b353-4bbe45a4f93c",
	"324b9649-c373-4ba1-814c-460202283e85");
INSERT INTO O_BATTR
	VALUES ("48ad1eab-ce0d-4eeb-b353-4bbe45a4f93c",
	"324b9649-c373-4ba1-814c-460202283e85");
INSERT INTO O_ATTR
	VALUES ("48ad1eab-ce0d-4eeb-b353-4bbe45a4f93c",
	"324b9649-c373-4ba1-814c-460202283e85",
	"54ddcd61-f3c0-476d-9c86-5671d4de20b8",
	'EntryTime',
	'',
	'',
	'EntryTime',
	0,
	"d3fcb8ce-ecb8-4cf7-b70d-7ae617f25ee4",
	'',
	'');
INSERT INTO O_REF
	VALUES ("324b9649-c373-4ba1-814c-460202283e85",
	"78bbccbe-149d-4c28-8bb9-62c7583ac7b1",
	0,
	"4286e7ff-8596-46c9-9fd1-e94ec96fed44",
	"bff5db6a-b032-4796-8092-49927e8b11a8",
	"5f47f2bf-2d91-4b1c-8696-bfc3acc9c730",
	"0fee315e-6010-4452-b50e-e67eabbdc361",
	"54ddcd61-f3c0-476d-9c86-5671d4de20b8",
	"6d8f49c5-d674-4ee9-8f7d-164d99b99afb",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Ticket',
	'Number',
	'R26.''identified by''');
INSERT INTO R_RGO_PROXY
	VALUES ("324b9649-c373-4ba1-814c-460202283e85",
	"bff5db6a-b032-4796-8092-49927e8b11a8",
	"5f47f2bf-2d91-4b1c-8696-bfc3acc9c730",
	'../CarparkControl.xtuml');
INSERT INTO O_RTIDA_PROXY
	VALUES ("4286e7ff-8596-46c9-9fd1-e94ec96fed44",
	"78bbccbe-149d-4c28-8bb9-62c7583ac7b1",
	0,
	"bff5db6a-b032-4796-8092-49927e8b11a8",
	"0fee315e-6010-4452-b50e-e67eabbdc361",
	'../CarparkControl.xtuml');
INSERT INTO O_RATTR
	VALUES ("54ddcd61-f3c0-476d-9c86-5671d4de20b8",
	"324b9649-c373-4ba1-814c-460202283e85",
	"4286e7ff-8596-46c9-9fd1-e94ec96fed44",
	"78bbccbe-149d-4c28-8bb9-62c7583ac7b1",
	1,
	'Number');
INSERT INTO O_BATTR_PROXY
	VALUES ("4286e7ff-8596-46c9-9fd1-e94ec96fed44",
	"78bbccbe-149d-4c28-8bb9-62c7583ac7b1",
	'../Ticket/Ticket.xtuml');
INSERT INTO O_ATTR
	VALUES ("54ddcd61-f3c0-476d-9c86-5671d4de20b8",
	"324b9649-c373-4ba1-814c-460202283e85",
	"00000000-0000-0000-0000-000000000000",
	'TicketNumber',
	'',
	'Ticket',
	'Number',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"324b9649-c373-4ba1-814c-460202283e85");
INSERT INTO O_OIDA
	VALUES ("54ddcd61-f3c0-476d-9c86-5671d4de20b8",
	"324b9649-c373-4ba1-814c-460202283e85",
	0,
	'TicketNumber');
INSERT INTO O_ID
	VALUES (1,
	"324b9649-c373-4ba1-814c-460202283e85");
INSERT INTO O_ID
	VALUES (2,
	"324b9649-c373-4ba1-814c-460202283e85");
INSERT INTO PE_PE
	VALUES ("324b9649-c373-4ba1-814c-460202283e85",
	1,
	"0e2ca0ec-d69c-4d5e-a330-1f86d9c2ffa4",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO EP_PKG_PROXY
	VALUES ("0e2ca0ec-d69c-4d5e-a330-1f86d9c2ffa4",
	"00000000-0000-0000-0000-000000000000",
	"887b82b9-56ec-4387-b15a-8b42f655cdba",
	'CarparkControl',
	'Assumptions:
1. Carpark is a singleton.  However, this domain is engineered to make it 
fairly simple to support multiple instances of Carpark with a single instance
of the application.
',
	0,
	'../CarparkControl.xtuml');
